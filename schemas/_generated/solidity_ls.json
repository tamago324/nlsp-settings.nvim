{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Setting of solidity_ls",
  "properties": {
    "solidity.compileUsingLocalVersion": {
      "default": "",
      "description": "Compile using a local solc (js) binary file, please include the path of the file if wanted: 'C://v0.4.3+commit.2353da71.js'",
      "type": "string"
    },
    "solidity.compileUsingRemoteVersion": {
      "default": "latest",
      "description": "Configuration to download a 'remote' solc (js) version binary file from 'https://binaries.soliditylang.org/', for example: 'latest' will always use the latest version, or a specific version like: 'v0.4.3+commit.2353da71', use the command 'Solidity: Get solidity releases' to list all versions available, or just right click in a solidity file and select either `Solidity: Change global compiler version (Remote)` or `Solidity: Change workspace compiler version (Remote)` to use the wizard to set the correct version or setting for either the current workspace or globally",
      "type": "string"
    },
    "solidity.compilerOptimization": {
      "default": 200,
      "description": "Optimize for how many times you intend to run the code. Lower values will optimize more for initial deployment cost, higher values will optimize more for high-frequency usage.",
      "type": "number"
    },
    "solidity.defaultCompiler": {
      "default": "remote",
      "description": "Sets the default compiler and compiler configuration to use. Remote will use the configured compiler using the setting 'compileUsingRemoteVersion' downloaded from https://binaries.soliditylang.org/', `localFile` will use the solc file in the location configured in the setting: `compileUsingLocalVersion`, `localNodeModule` will attempt to find the solc file in the node_modules folder / package configured on 'nodemodulespackage' and 'embedded' which will use the solc version packaged with the extension. The default is 'remote' which is configured as 'latest'",
      "enum": [
        "remote",
        "localFile",
        "localNodeModule",
        "embedded"
      ],
      "type": "string"
    },
    "solidity.enabledAsYouTypeCompilationErrorCheck": {
      "default": true,
      "description": "Enables as you type compilation of the document and error highlighting",
      "type": "boolean"
    },
    "solidity.evmVersion": {
      "default": "",
      "description": "Evm version, ie london, istanbul, petersburg, constantinople, byzantium, tangerineWhistle, spuriousDragon, homestead, frontier, or leave it blank for the default evm version",
      "type": "string"
    },
    "solidity.explorer_bscscan_apikey": {
      "default": "YourApiKey",
      "description": "Api key for downloading Binance smart chain smart contracts from api.bscscan.com",
      "type": "string"
    },
    "solidity.explorer_etherscan_apikey": {
      "default": "YourApiKey",
      "description": "Api key for downloading ethereum smart contracts from etherscan.io",
      "type": "string"
    },
    "solidity.explorer_etherscan_optimism_apikey": {
      "default": "YourApiKey",
      "description": "Api key for downloading optimism smart contracts from api-optimistic.etherscan.io",
      "type": "string"
    },
    "solidity.explorer_polygonscan_apikey": {
      "default": "YourApiKey",
      "description": "Api key for downloading polygon smart contracts from api.polygonscan.com",
      "type": "string"
    },
    "solidity.formatter": {
      "default": "prettier",
      "description": "Enables / disables the solidity formatter prettier (default) or forge (note it needs to be installed)",
      "enum": [
        "none",
        "prettier",
        "forge"
      ],
      "type": "string"
    },
    "solidity.linter": {
      "default": "solhint",
      "description": "Enables linting using either solium (ethlint) or solhint. Possible options 'solhint' and 'solium', the default is solhint",
      "enum": [
        "",
        "solhint",
        "solium"
      ],
      "type": "string"
    },
    "solidity.monoRepoSupport": {
      "default": true,
      "description": "Enables mono repo support in the current workspace, a project folder will be signaled if a file is found on the current folder or above including: remappings.txt, truffle-config.js, brownie-config.yaml, foundry.toml, hardhat.config.js, hardhat.config.ts, dappfile",
      "type": "boolean"
    },
    "solidity.nodemodulespackage": {
      "default": "solc",
      "description": "The node modules package to find the solcjs compiler",
      "type": "string"
    },
    "solidity.packageDefaultDependenciesContractsDirectory": {
      "default": [
        "src",
        "contracts",
        ""
      ],
      "description": "Default directory where the Package Dependency store its contracts, i.e: 'src', 'contracts', or just a blank string '', this is used to avoid typing imports with subfolder paths",
      "type": [
        "string",
        "string[]"
      ]
    },
    "solidity.packageDefaultDependenciesDirectory": {
      "default": [
        "node_modules",
        "lib"
      ],
      "description": "Default directory for Packages Dependencies, i.e: 'node_modules', 'lib'. This is used to avoid typing imports with that path prefix, multiple dependency paths can be set as an array: ['node_modules', 'lib'] ",
      "type": [
        "string",
        "string[]"
      ]
    },
    "solidity.remappings": {
      "default": [],
      "description": "Remappings to resolve contracts to local files / directories, i.e: [\"@openzeppelin/=lib/openzeppelin-contracts\",\"ds-test/=lib/ds-test/src/\"]",
      "type": "array"
    },
    "solidity.remappingsUnix": {
      "default": [],
      "description": "Unix Remappings to resolve contracts to local Unix files / directories (Note this overrides the generic remapping settings if the OS is Unix based), i.e: [\"@openzeppelin/=/opt/lib/openzeppelin-contracts\",\"ds-test/=/opt/lib/ds-test/src/\"]",
      "type": "array"
    },
    "solidity.remappingsWindows": {
      "default": [],
      "description": "Windows Remappings to resolve contracts to local Windows files / directories (Note this overrides the generic remapping settings if the OS is Windows) , i.e: [\"@openzeppelin/=C:/lib/openzeppelin-contracts\",\"ds-test/=C:/lib/ds-test/src/\"]",
      "type": "array"
    },
    "solidity.solhintRules": {
      "default": null,
      "description": "Solhint linting validation rules",
      "type": [
        "object"
      ]
    },
    "solidity.soliumRules": {
      "default": {
        "imports-on-top": 0,
        "indentation": [
          "off",
          4
        ],
        "quotes": [
          "off",
          "double"
        ],
        "variable-declarations": 0
      },
      "description": "Solium linting validation rules",
      "type": [
        "object"
      ]
    },
    "solidity.validationDelay": {
      "default": 1500,
      "description": "Delay to trigger the validation of the changes of the current document (compilation, solium)",
      "type": "number"
    },
    "solidity.viaIR": {
      "default": false,
      "description": "Compile using the intermediate representation (IR) instead of the AST",
      "type": "boolean"
    }
  }
}
