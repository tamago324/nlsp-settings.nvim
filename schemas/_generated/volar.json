{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Setting of volar",
  "properties": {
    "vue.autoInsert.bracketSpacing": {
      "default": true,
      "description": "Auto add space between double curly brackets: {{|}} -> {{ | }}",
      "type": "boolean"
    },
    "vue.autoInsert.dotValue": {
      "default": false,
      "description": "Auto-complete Ref value with `.value`.",
      "type": "boolean"
    },
    "vue.codeActions.askNewComponentName": {
      "default": true,
      "description": "Ask for new component name when extract component.",
      "type": "boolean"
    },
    "vue.codeActions.enabled": {
      "default": true,
      "description": "Enabled code actions.",
      "type": "boolean"
    },
    "vue.codeLens.enabled": {
      "default": true,
      "description": "Enabled code lens.",
      "type": "boolean"
    },
    "vue.complete.casing.props": {
      "default": "autoKebab",
      "description": "Preferred attr name case.",
      "enum": [
        "autoKebab",
        "autoCamel",
        "kebab",
        "camel"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)",
        "Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",
        ":kebab-case=\"...\"",
        ":camelCase=\"...\""
      ],
      "type": "string"
    },
    "vue.complete.casing.tags": {
      "default": "autoPascal",
      "description": "Preferred tag name case.",
      "enum": [
        "autoKebab",
        "autoPascal",
        "kebab",
        "pascal"
      ],
      "enumDescriptions": [
        "Auto Detect from Content (Fallback to <kebab-case> if detect failed)",
        "Auto Detect from Content  (Fallback to <PascalCase> if detect failed)",
        "<kebab-case>",
        "<PascalCase>"
      ],
      "type": "string"
    },
    "vue.complete.defineAssignment": {
      "default": true,
      "description": "Auto add `const props = ` before `defineProps` when selecting the completion item `props`. (also `emit` and `slots`)",
      "type": "boolean"
    },
    "vue.doctor.status": {
      "default": true,
      "description": "Show known problems in status bar.",
      "type": "boolean"
    },
    "vue.format.script.initialIndent": {
      "default": false,
      "type": "boolean"
    },
    "vue.format.style.initialIndent": {
      "default": false,
      "type": "boolean"
    },
    "vue.format.template.initialIndent": {
      "default": true,
      "type": "boolean"
    },
    "vue.format.wrapAttributes": {
      "default": "auto",
      "enum": [
        "auto",
        "force",
        "force-aligned",
        "force-expand-multiline",
        "aligned-multiple",
        "preserve",
        "preserve-aligned"
      ],
      "type": "string"
    },
    "vue.inlayHints.destructuredProps": {
      "default": false,
      "markdownDescription": "Show inlay hints for destructured props:\n\n```ts\nwatch(() => /* props. */foo, () => { ... });\n```",
      "type": "boolean"
    },
    "vue.inlayHints.inlineHandlerLeading": {
      "default": false,
      "markdownDescription": "Show inlay hints for event argument in inline handlers:\n\n```html\n<Comp @foo=\"/* $event => */console.log($event)\" />\n```",
      "type": "boolean"
    },
    "vue.inlayHints.missingProps": {
      "default": false,
      "markdownDescription": "Show inlay hints for missing required props:\n\n```html\n<Comp />\n<!-- ^ foo! -->\n```",
      "type": "boolean"
    },
    "vue.inlayHints.optionsWrapper": {
      "default": false,
      "markdownDescription": "Show inlay hints for component options wrapper for type support:\n\n```vue\n<script lang=\"ts\">\nexport default /* (await import('vue')).defineComponent( */{}/* ) */;\n</script>\n```",
      "type": "boolean"
    },
    "vue.inlayHints.vBindShorthand": {
      "default": false,
      "markdownDescription": "Show inlay hints for v-bind shorthand:\n\n```html\n<Comp :foo />\n     <!-- ^ =\"foo\" -->\n```",
      "type": "boolean"
    },
    "vue.server.includeLanguages": {
      "default": [
        "vue"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.splitEditors.icon": {
      "default": false,
      "description": "Show split editor icon in title area of editor.",
      "type": "boolean"
    },
    "vue.splitEditors.layout.left": {
      "default": [
        "script",
        "scriptSetup",
        "styles"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.splitEditors.layout.right": {
      "default": [
        "template",
        "customBlocks"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "vue.trace.server": {
      "default": "off",
      "description": "Traces the communication between VS Code and the language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "scope": "window",
      "type": "string"
    }
  }
}
