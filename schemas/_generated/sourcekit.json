{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Setting of sourcekit",
  "properties": {
    "swift.actionAfterBuildError": {
      "default": "Focus Terminal",
      "enum": [
        "Focus Problems",
        "Focus Terminal",
        "Do Nothing"
      ],
      "enumDescriptions": [
        "Focus on Problems View",
        "Focus on Build Task Terminal"
      ],
      "markdownDescription": "Action after a Build task generates errors.",
      "type": "string"
    },
    "swift.additionalTestArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to pass to the `swift test` or `swift build` commands used when building and running tests from within VS Code.",
      "scope": "machine-overridable",
      "type": "array"
    },
    "swift.autoGenerateLaunchConfigurations": {
      "default": true,
      "markdownDescription": "When loading a `Package.swift`, auto-generate `launch.json` configurations for running any executables.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.backgroundCompilation": {
      "default": false,
      "markdownDescription": "**Experimental**: Run `swift build` in the background whenever a file is saved. It is possible the background compilation will already be running when you attempt a compile yourself, so this is disabled by default.",
      "type": "boolean"
    },
    "swift.buildArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Additional arguments to pass to `swift` commands such as `swift build`, `swift package`, `swift test`, etc... Keys and values should be provided as individual entries in the list. If you have created a copy of the build task in `tasks.json` then these build arguments will not be propagated to that task.",
      "type": "array"
    },
    "swift.buildPath": {
      "default": "",
      "markdownDescription": "The path to a directory that will be used for build artifacts. This path will be added to all swift package manager commands that are executed by vscode-swift extension via `--scratch-path` option. When no value provided - nothing gets passed to swift package manager and it will use its default value of `.build` folder in the workspace.\n\nYou can use absolute path for directory or the relative path, which will use the workspace path as a base. Note that VS Code does not respect tildes (`~`) in paths which represents user home folder under *nix systems.",
      "type": "string"
    },
    "swift.diagnosticsCollection": {
      "default": "keepSourceKit",
      "enum": [
        "onlySwiftc",
        "onlySourceKit",
        "keepSwiftc",
        "keepSourceKit",
        "keepAll"
      ],
      "enumDescriptions": [
        "Only provide diagnostics from `swiftc`.",
        "Only provide diagnostics from `SourceKit`.",
        "When merging diagnostics, give precedence to diagnostics from `swiftc`.",
        "When merging diagnostics, give precedence to diagnostics from `SourceKit`.",
        "Keep diagnostics from all providers."
      ],
      "markdownDescription": "Controls how diagnostics from the various providers are merged into the collection of `swift` errors and warnings shown in the Problems pane.",
      "type": "string"
    },
    "swift.diagnosticsStyle": {
      "default": "llvm",
      "enum": [
        "default",
        "llvm",
        "swift"
      ],
      "markdownDescription": "The formatting style used when printing diagnostics in the Problems panel. Corresponds to the `-diagnostic-style` option to pass to `swiftc` when running `swift` tasks.",
      "markdownEnumDescriptions": [
        "Use whichever diagnostics style `swiftc` produces by default.",
        "Use the `llvm` diagnostic style. This allows the parsing of \"notes\".",
        "Use the `swift` diagnostic style. This means that \"notes\" will not be parsed. This option has no effect in Swift versions prior to 5.10."
      ],
      "type": "string"
    },
    "swift.disableAutoResolve": {
      "default": false,
      "markdownDescription": "Disable automatic running of `swift package resolve` whenever the `Package.swift` or `Package.resolve` files are updated. This will also disable searching for command plugins and the initial test discovery process.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.disableSwiftPackageManagerIntegration": {
      "default": false,
      "markdownDescription": "Disables automated Build Tasks, Package Dependency view, Launch configuration generation and TestExplorer.",
      "type": "boolean"
    },
    "swift.enableTerminalEnvironment": {
      "default": true,
      "markdownDescription": "Controls whether or not the extension will contribute environment variables defined in `Swift: Environment Variables` to the integrated terminal. If this is set to `true` and a custom `Swift: Path` is also set then the swift path is appended to the terminal's `PATH`.",
      "type": "boolean"
    },
    "swift.path": {
      "default": "",
      "markdownDescription": "Override the default path of the folder containing the Swift executables. The default is to look in the `PATH` environment variable. This path is also used to search for other executables used by the extension like `sourcekit-lsp` and `lldb`.",
      "type": "string"
    },
    "swift.sanitizer": {
      "default": "off",
      "enum": [
        "off",
        "thread",
        "address"
      ],
      "markdownDescription": "Runtime [sanitizer instrumentation](https://www.swift.org/documentation/server/guides/llvm-sanitizers.html).",
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.searchSubfoldersForPackages": {
      "default": false,
      "markdownDescription": "Search sub-folders of workspace folder for Swift Packages at start up.",
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.testEnvironmentVariables": {
      "default": {},
      "markdownDescription": "Environment variables to set when running tests. To set environment variables when debugging an application you should edit the `env` field in the relevant `launch.json` configuration.",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      },
      "scope": "machine-overridable",
      "type": "object"
    },
    "swift.warnAboutSymlinkCreation": {
      "default": true,
      "markdownDescription": "Controls whether or not the extension will warn about being unable to create symlinks. (Windows only)",
      "scope": "application",
      "type": "boolean"
    }
  }
}
