*nlsp-settings.nvim*


==============================================================================
INTRODUCTION                                      *nlsp-settings-introduction*

A plugin to configure Neovim LSP using json files like `coc-settings.json`.


==============================================================================
REQUIREMENTS                                      *nlsp-settings-requirements*

* Neovim
* neovim/nvim-lspconfig


==============================================================================
INTERFACE                                            *nlsp-settings-interface*


------------------------------------------------------------------------------
Lua module: nlspsettings                                        *nlspsettings*

setup({opts})                                           *nlspsettings.setup()*
    Set the default `on_new_config` to process reading the settings from a
    JSON file.

    Parameters: ~
        {opts} (optional, table)

    Fields: ~
        {config_home} (optional, string)
            The directory containing the settings files.

            Default: `'~/.config/nvim/nlsp-settings'`

        {local_settings_dir} (optional, string)
            The directory containing the local settings files.

            Default: `'.nlsp-settings'`

        {local_settigns_root_markers} (optional, table)
            A list of files and directories to use when looking for the
            root directory when opening a file with |:NlspLocalConfig|.

            Default: `{ '.git' }`

        {loader} (optional, "json" | "yaml")
            設定ファイルを読み込む loader を指定します。
            それぞれ、以下のようになります。

            "json": jsonls を使って、言語サーバー名.json を読みます。
            "yaml": yamlls を使って、言語サーバー名.yml か言語サーバー名.yaml を読みます。
                    もし、複数ファイル見つかった場合、yml を優先して読みます。


            Default: `"json"`
                      

        {append_default_schemas} (optional, boolean)
            loader に対応する言語サーバーの schemas にデフォルトを追加します。

            Default: `false`

            Setting this value to true is equal to executing the
            following code.

            ここに書く

        {nvim_notify} (optional, table)
            Configuration for nvim-notify integration.

            Config table:
            • `enable` : Enable nvim-notify integration.
            • `timeout` : Time to show notification in millisencons.

            Default: `{ enable = false, timeout = 5000 }`

get_settings({name})                             *nlspsettings.get_settings()*
    Gets the configuration of the specified server.

    Parameters: ~
        {opts} (string)

    Return: ~
        table:

------------------------------------------------------------------------------
Lua module: nlspsettings.json                                *nlspsettings.json*

get_default_schemas()                  *nlspsettings.json.get_default_schemas()*
    Return a list of default schemas

    Return: ~
        table


------------------------------------------------------------------------------
COMMANDS                                              *nlsp-settings-commands*

:NlspConfig {server_name}                                        *:NlspConfig*
    Open the settings file for the specified {server_name}.

:NlspBufConfig                                                *:NlspBufConfig*
    Open a settings file that matches the current buffer.

:NlspLocalConfig {server_name}                              *:NlspLocalConfig*
    Open the local settings file of the specified {server_name}
    corresponding to the cwd.
    NOTE: Local version of |:NlspConfig|

:NlspLocalBufConfig                                      *:NlspLocalBufConfig*
    Open the local settings file of the server corresponding to the
    current buffer.
    NOTE: Local version of |:NlspBufConfig|

:NlspUpdateSettings {server_name}                        *:NlspUpdateSettings*
    Update the setting values for the specified {server_name}.


------------------------------------------------------------------------------
KEYMAPPINGS                                        *nlsp-settings-keymappings*

n <Plug>(nlsp-buf-config)                            *<Plug>(nlsp-buf-config)*
    |:NlspBufConfig|

n <Plug>(nlsp-local-buf-config)                *<Plug>(nlsp-local-buf-config)*
    |:NlspLocalBufConfig|

==============================================================================
EXAMPLES                                              *nlsp-settings-examples*

Configuration using `williamboman/nvim-lsp-installer`:
>
    local on_attach = function(client)
      local map = vim.api.nvim_buf_set_keymap
      map( 'n', '<Space>vl', '<Plug>(nlsp-buf-config)', { noremap = false })
    end

    require'nlspsettings'.setup({
      config_home = vim.fn.stdpath('config') .. '/nlsp-settings',
      local_settings_root_markers = { '.git' },
      -- append default schemas
      append_default_schemas = true
    })

    local server_opts = {}

    -- lua
    server_opts.sumneko_lua = {
      settings = {
        Lua = {
          workspace = {
            library = {
              [vim.fn.expand("$VIMRUNTIME/lua")] = true,
              [vim.fn.stdpath("config") .. '/lua'] = true,
            }
          }
        }
      }
    }

    local common_setup_opts = {
      on_attach = on_attach,
      capabilities = require('cmp_nvim_lsp').update_capabilities(
        vim.lsp.protocol.make_client_capabilities()
      )
    }

    lsp_installer.on_server_ready(function(server)
      local opts = vim.deepcopy(common_setup_opts)
      if server_opts[server.name] then
          opts = vim.tbl_deep_extend('force', opts, server_opts[server.name])
      end
      server:setup(opts)
    end)
<

Configure lspconfig by itself:
>
    local on_attach = function(client)
      local map = vim.api.nvim_buf_set_keymap
      map( 'n', '<Space>vl', '<Plug>(nlsp-buf-config)', { noremap = false })
    end

    require'nlspsettings'.setup({
      config_home = vim.fn.stdpath('config') .. '/nlsp-settings',
      local_settings_root_markers = { '.git' },
      -- append default schemas
      append_default_schemas = true
    })
    local lspconfig = require'lspconfig'

    -- jsonls
    lspconfig.jsonls.setup {
      -- Set the schema so that it can be completed in settings json file.
      on_attach = on_attach,
    }

    -- lua
    lspconfig.sumneko_lua.setup{
      settings = {
        Lua = {
          workspace = {
            library = {
              [vim.fn.expand("$VIMRUNTIME/lua")] = true,
              [vim.fn.stdpath("config") .. '/lua'] = true,
            }
          }
        }
      },
      on_attach = on_attach,
    }

==============================================================================
vim:tw=78:sw=4:sts=4:ts=4:ft=help:norl:et
